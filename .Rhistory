# - If there is metabolites: only one per metaboliteID; no + & no hsa:
library(hipathia)
species <- "hsa"
p <- hipathia::load_pathways(species = species)
## Selecting and Identifying MGI pathways without any complication.
# Simple pathways are :
#   - Have only entrezID or NA in the genesList
# - If there is metabolites: only one per metaboliteID; no + & no hsa:
library(hipathia)
species <- "hsa"
p <- hipathia::load_pathways(species = species)
packageVersion("optparse")
packageVersion("optparse") < "1.7.1"
library(hipathia)
mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
# mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
sif.folder <- "/home/kinza/Downloads/pathways/"
spe <- "hsa"
message("Loading graphs...")
pgs <- load_graphs(sif.folder, spe)
pgs <- hipathia:::load_graphs(sif.folder, spe)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
traceback()
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
traceback()
debug(create_metaginfo_object)
debug(hipathia:::create_metaginfo_object)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
undebug(hipathia::create_metaginfo_object)
undebug()
undebug(hipathia:::create_metaginfo_object)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
debug(hipathia())
debug(hipathia
)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals
gv<-genes_vals
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals
gv
genes_vals<-0.5
genes_vals
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals
gv
gv<-genes_vals
gv
genes_vals
genes_vals<-gv
genes_vals
traceback()
debug(hipathia:::get_node_type)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gv<-genes_vals
gv
genes_vals
genes_vals<-gv
genes_vals
gv
gv2<-genes_vals
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gv2<-genes_vals
genes_vals<-gv2
genes_vals
cols
genes_vals
genes_vals
nodes
pg
metaginfo$pathigraphs
types
types
metaginfo$pathigraphs$hsaPA2023$path.name
metaginfo$pathigraphs$hsaPA2023$path.id
df <- lapply(metaginfo$pathigraphs, function(pg) {
cat(pg$path.id)
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
d <- d[!grepl("_func", d$name), ]
})
df <- lapply(metaginfo$pathigraphs, function(pg) {
cat(pg$path.id,"\n")
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
d <- d[!grepl("_func", d$name), ]
})
pg
pg <- metaginfo$pathigraphs$hsaPA166246261
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
pg$graph)$name
V(pg$graph)$name,
V(pg$graph)$name
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gv<-genes_vals
gv
genes_vals
gv<-genes_vals
traceback()
debug(hipathia:::compute_node_signal)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gv<-genes_vals
gv
genes_vals<-gv
actnode
actnode
actnode
actnode
actnode
actnode
actnode
actnode
actnode
actnode
actnode
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gv<-genes_vals
gv
gv <-genes_vals
actnode
undebug(hipathia:::compute_node_signal)
pgs <- hipathia:::load_graphs(sif.folder, spe)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals
gvz<-genes_vals
genes_vals<-gvz
genes_vals
gvz<-genes_vals
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
gvz<-genes_vals
gvz<-genes_vals
gvz
gvz[][]<-0.5
gvz
genes_vals
genes_vals[][]<-0.5
genes_vals
df <- lapply(metaginfo$pathigraphs, function(pg) {
cat(pg$path.id,"\n")
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
d <- d[!grepl("_func", d$name), ]
})
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals[][]<-0.5
df <- lapply(metaginfo$pathigraphs, function(pg) {
cat(pg$path.id,"\n")
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
d <- d[!grepl("_func", d$name), ]
})
hsaPA2032
pgs <- hipathia:::load_graphs(sif.folder, spe)
metaginfo <- hipathia:::create_metaginfo_object(pgs, spe, by.user = TRUE)
genes_vals[][]<-0.5
df <- lapply(metaginfo$pathigraphs, function(pg) {
cat(pg$path.id,"\n")
d <- data.frame(name = V(pg$graph)$name, label = V(pg$graph)$label,
type = types[V(pg$graph)$shape])
d <- d[!grepl("_func", d$name), ]
})
genes_vals
genes_vals[][]<-0.5
undebug(hipathia:::get_node_type)
mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
genes_vals
genes_vals[][]<-0.5
genes_vals
genes_vals[][]<-0.5
traceback()
debug(hipathia:::path_value)
mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
genes_vals[][]<-0.5
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
nodes_vals
mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
undebug(hipathia:::path_value)
mgi <- hipathia::mgi_from_sif("/home/kinza/Downloads/pathways/", spe = "hsa")
genes_vals
genes_vals[][]<-0.5
genes_vals[][]<-0.5
spe = "hsa"
saveRDS(mgi, file = paste0("/home/kinza/Downloads/pathways/meta_graph_info_", spe, "_pharmgkb.rds"))
?browser()
trace
trace()
?trace()
trace(hipathia )
hipathia()
untrace(hipathia )
recover
recover()
mean(x)
traceback()
cat(x)
traceback()
recover()
cat(x)
recover()
mean(x)
recover()
mean(x)
trace()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
ret.x
x
ls()
formula
data
subset
qr
singular.ok
q()
undebug(lm)
lm(y~x)
recover()
options(error=recover)
lm(y~x)
cat(x)
x
ls()
...
trace
trace()
q$a <- 1
q<-list()
q$a<-1
a
q$b<-2
q
detach(q)
attach(q)
a
b
q
q[[a]]
q[[b]]
q[[c]]
exists(q[[c]])
ls()
a
ls(all.names = TRUE)
ls(sorted = T)
ls(sorted = F)
ls(all.names = F)
my_list <- list(a = 10, b = 20)
attach(my_list)
a
q
b
ls(all.names = TRUE)
all_variables <- ls(all.names = TRUE)
print(all_variables)
ls(pos = 2)
ls(pos = 3)
ls(pos = 4)
ls(pos = 5)
ls(pos = q)
# Check if the required files exist and are non-empty
required_files <- c("exp"="exp_file", "met_file", "design_file")
ls(pos = opt)  names(file_name)
names(file_name)
names(required_files)
required_files <- c("exp"="exp_file", "met_file", "design_file")
for (file_name in required_files) {
if (is.null(opt[[file_name]]) || !file.exists(opt[[file_name]]) || file.size(opt[[file_name]]) == 0) {
stop(paste("Error: '", names(required_files[file_name]), "' is missing, does not exist, or is empty.", sep = ""))
}
}
for (file_name in required_files) {
paste("Error: '", names(required_files[file_name]), "' is missing, does not exist, or is empty.", sep = "")
}
for (file_name in required_files) {
cat("Error: '", names(required_files[file_name]), "' is missing, does not exist, or is empty.", sep = "")
}
required_files[file_name]
for (file_name in required_files) {
cat("Error: '", names(file_name), "' is missing, does not exist, or is empty.", sep = "")
}
required_files[1]
required_files[[file_name]]
required_files["exp"]
required_files <- c("exp"="exp_file", "met_file", "design_file")
for (file_name in required_files) {
cat("Error: '", required_files[file_name], "' is missing, does not exist, or is empty.", sep = "")
}
for (file_name in required_files) {
cat("Error: '", required_files[file_name])
}
file_name
required_files
for (file_name in required_files) {
cat(file_name," Error: '", required_files[file_name])
}
tempdir()
tempdir()
tempdir()
tempdir()
?file.path
output_folder
temporal_dir <- tempdir()
temporal_dir
output_folder <- file.path(temporal_dir,
paste0("metabopathia_report",length(list.files(temporal_dir, pattern = "metabopathia_report")) + 1))
cat("output_folder after tm:", output_folder,"\n")
!file.exists(output_folder)
tryCatch(dir.create(output_folder, showWarnings = T, recursive = T, ),warning="heh")
file.path(codebase,"tmp")
q
install.packages("rrr")
install.packages("usethis")
# Automate Package and Project Setup
# think about this : https://cran.r-project.org/web/packages/usethis/usethis.pdf
library(usethis)
# Create a new package -------------------------------------------------
path <- file.path(tempdir(), "metabopathia")
tempdir()
setwd("~/Documents/metabopathia")
# Create a new package -------------------------------------------------
path <- file.path("test_project_code/", "metabopathia")
path
# Create a new package -------------------------------------------------
path <- file.path("test_project_code", "metabopathia")
path
create_package(path)
# Automate Package and Project Setup
# think about this : https://cran.r-project.org/web/packages/usethis/usethis.pdf
library(usethis)
# Create a new package -------------------------------------------------
path <- file.path("test_project_code", "metabopathia")
# Create a new package -------------------------------------------------
path <- file.path("metabopathia")
path
setwd("~/Documents/metabopathia/test_project_code")
# Create a new package -------------------------------------------------
path <- file.path("~/Documents/metabopathia/test_project_code","metabopathia")
path
create_package(path)
q
# Create a new package -------------------------------------------------
path <- file.path(tempdir(), "metabopathia")
create_package(path)
setwd("~/Documents/metabopathia")
exp_file
exp_file<-data_examples/Dystrophic_epidermolysis_bullosa/counts_TMM_normalization.tsv
exp_file<-"data_examples/Dystrophic_epidermolysis_bullosa/counts_TMM_normalization.tsv"
met_file<-"data_examples/Dystrophic_epidermolysis_bullosa/metabolite_suero.tsv"
design_file<-"data_examples/Dystrophic_epidermolysis_bullosa/integration_design.tsv"
design_file
### Load data from files
# load expression
exp <- read.table(exp_file,header=T,sep="\t",stringsAsFactors=F,row.names = 1,comment.char="",check.names=F)
View(exp)
# load metabolite concentrations
metabo_data <- read.table(met_file,header=T,sep="\t",stringsAsFactors=F,row.names = 1,comment.char="",check.names=F)
View(metabo_data)
# load design
des <- read.table(design_file,header=F,stringsAsFactors=F)
View(des)
group1<-"control"
group2<-"control"
group1<-"visit1"
design_type
design_type="categorical"
analysis="compare"
verbose
verbose<-T
### Load data from files
# load expression
exp <- read.table(exp_file,header=T,sep="\t",stringsAsFactors=F,row.names = 1,comment.char="",check.names=F)
# load metabolite concentrations
metabo_data <- read.table(met_file,header=T,sep="\t",stringsAsFactors=F,row.names = 1,comment.char="",check.names=F)
# load design
des <- read.table(design_file,header=F,stringsAsFactors=F)
design_type
colnames(des)
rownames(des)
design_type == "continuous"
(design_type == "continuous")+1
c("group","value")[(design_type == "continuous")+1]
c("group","value")[(T)+1]
library(dplyr)
des %>% dplyr::renamec("sample",c("group","value")[(design_type == "continuous")+1]))
des %>% dplyr::rename(c("sample",c("group","value")[(design_type == "continuous")+1]))
colnames(des)
des %>% dplyr::rename(colnames(des), c("sample",c("group","value")[(design_type == "continuous")+1]))
des %>% dplyr::rename_at(colnames(des), c("sample",c("group","value")[(design_type == "continuous")+1]))
des %>% dplyr::rename_all(c("sample",c("group","value")[(design_type == "continuous")+1]))
c("sample",c("group","value")[(design_type == "continuous")+1])
vars(colnames(des))
des %>% dplyr::rename_at(vars(colnames(des)), c("sample",c("group","value")[(design_type == "continuous")+1]))
des %>% dplyr::rename_all(list(c("sample",c("group","value")[(design_type == "continuous")+1])))
list(c("sample",c("group","value")[(design_type == "continuous")+1]))
des %>% dplyr::rename_all(list(~ c("sample",c("group","value")[(design_type == "continuous")+1])))
list(~ c("sample",c("group","value")[(design_type == "continuous")+1]))
class(list(~ c("sample",c("group","value")[(design_type == "continuous")+1])))
print((~ "a", "b")
print((~ "a")
)
print((~ "a"))
print((~ c("a","b")))
cat(print((~ c("a","b"))))
print(print((~ c("a","b"))))
print(print((~ c("a","b","c"))))
des %>%
dplyr::rename_all(list(~ c("sample",c("group","value")[(design_type == "continuous")+1])))  %>%
rownames_to_column(var=des$sample)
colnames(des)
colnames(des) <- c("sample",c("group","value")[(design_type == "continuous")+1])
rownames(des)
rownames(des) <- des$sample
# Filter only the cond1 and cond2
if(design_type == "categorical"){
des <- des %>% filter(group %in% c(cond1, cond2))
}
des %>% filter(group %in% c(group1, group2))
des$C02
View(exp)
exp <- exp %>% select(des$sample)
ncol(exp)
nrow(des)
ncol(exp) == 0 || ncol(metabo_data) == 0
des$sample
c("P7" ,  des$sample[-12])
df <- tibble(a = 1, b = 1, c = 1, d = "a", e = "a", f = "a")
df
df %>% relocate(f)
df %>% relocate(f,c)
df %>% relocate(colnames(df))
exp
exp %>% select(des$sample) %>%
relocate(des$sample)
exp %>% select(des$sample) %>%
relocate(des$sample) %>% view()
exp %>% select(des$sample) %>%
relocate(c("P7" ,  des$sample[-12])) %>% View()
spe
spe="hsa"
verbose
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(data = exp, species = spe, verbose = verbose)
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(data = exp, species = spe, verbose = verbose)
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(data = as.matrix(exp), species = spe, verbose = verbose)
spe
as.matrix(exp)
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(data = as.matrix(exp), species = spe, verbose = verbose)
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(as.matrix(exp), species = spe, verbose = verbose)
View(exp)
spe
as.matrix(exp)
View(as.matrix(exp))
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(as.matrix(exp), species = spe, verbose = verbose)
library(hipathia)
### Translate names to EntrezGene :
trans_exp <- hipathia::translate_data(as.matrix(exp), species = spe, verbose = verbose)
### Translate names to EntrezGene :
trans_exp <- translate_data(as.matrix(exp), species = spe, verbose = verbose)
AnnotationHub::cache()
AnnotationHub::removeCache()
AnnotationHub::clearHubCache()
AnnotationHub::cacheDir()
AnnotationHub:::hubUrl()
cache_dir <- AnnotationHub:::.hubLoc()
AnnotationHub:::clearHubCache()
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::removeCache()
ANNOTATION_HUB_CACHE
ah <- AnnotationHub::AnnotationHub()
hub <- AnnotationHub()
library(BiocManager)
install("BiocFileCache")
### Translate names to EntrezGene :
trans_exp <- translate_data(as.matrix(exp), species = spe, verbose = verbose)
