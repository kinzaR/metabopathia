# dev.off()
# png("images/cnetplot_enrich_go_repressed_deseq2.png")
cnetplot(repressed.atha.enrich.go.deseq,showCategory = 10)
# dev.off()
source("revigo_outputs/revigo_data.R")
## La imagen del treemap generado por ReVIGO para los terminos GO activados (Limma)
rev_act_limma<-read.table("revigo_outputs/revigo_act_limma.tsv", sep = "\t")
colnames(rev_act_limma) <- rev_act_limma[1,]
rev_act_limma<- rev_act_limma[-1,]
mi_treemap(rev_act_limma,"images/rev_act_limma.png","Revigo TreeMap de los términos diferencialmente activados usando Limma")
###  La imagen del treemap generado por ReVIGO para los terminos GO reprimidos (Limma)
rev_rep_limma<-read.table("revigo_outputs/revigo_rep_limma.tsv", sep = "\t")
colnames(rev_rep_limma) <- rev_rep_limma[1,]
rev_rep_limma<- rev_rep_limma[-1,]
mi_treemap(rev_rep_limma,"images/rev_rep_limma.png","Revigo TreeMap de los términos diferencialmente reprimidos usando Limma")
## La imagen del treemap generado por ReVIGO para los terminos GO activados (DESeq2)
rev_act_desq<-read.table("revigo_outputs/revigo_act_deseq2.tsv", sep = "\t")
colnames(rev_act_desq) <- rev_act_desq[1,]
rev_act_desq<- rev_act_desq[-1,]
mi_treemap(rev_act_desq,"images/rev_act_desq.png","Revigo TreeMap de los términos diferencialmente activados usando DESeq2")
###  La imagen del treemap generado por ReVIGO para los terminos GO reprimidos (DESeq2)
rev_rep_desq<-read.table("revigo_outputs/revigo_rep_deseq2.tsv", sep = "\t")
colnames(rev_rep_desq) <- rev_rep_desq[1,]
rev_rep_desq<- rev_rep_desq[-1,]
mi_treemap(rev_rep_desq,"images/rev_rep_desq.png","Revigo TreeMap de los términos diferencialmente reprimidos usando DESeq2")
## Nos vamos a centrar a los Término de GO del Limma tanto para los activados
## como los reprimidos. Filtramos los 6 términos con el p-value ajustado más bajo.
act_enr_go_h<-head(activated.atha.enrich.go.df[ordered(activated.atha.enrich.go.df$p.adjust),c(1,2,7,8,9)])
rep_enr_go_h<-head(repressed.atha.enrich.go.df[ordered(activated.atha.enrich.go.df$p.adjust),c(1,2,7,8,9)])
data.frame(Termino_GO=paste0(act_enr_go_h$ID,"(",act_enr_go_h$qvalue,")"),
Descripcion=act_enr_go_h$Description,
Genes_Representativos=paste0(act_enr_go_h$Count," genes: ",act_enr_go_h$geneID))
data.frame(Termino_GO=paste0(rep_enr_go_h$ID,"(",rep_enr_go_h$qvalue,")"),
Descripcion=rep_enr_go_h$Description,
Genes_Representativos=paste0(rep_enr_go_h$Count," genes: ",rep_enr_go_h$geneID))
x <- org.Ce.egWORMBASE
# Get the entrez gene IDs that are mapped to a Wormbase ID
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
## Activated genes using Limma: activated.genes
activated.atha.enrich.kegg <- enrichKEGG(gene=names(xx[xx %in%activated.genes]),
organism = "cel", #cel
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
keyType = "ncbi-geneid")
df.activated.atha.enrich.kegg <- as.data.frame(activated.atha.enrich.kegg)
head(df.activated.atha.enrich.kegg)
repressed.atha.enrich.kegg <- enrichKEGG(gene=names(xx[xx %in%repressed.genes]),
organism = "cel", #cel
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
keyType = "ncbi-geneid")
df.repressed.atha.enrich.kegg <- as.data.frame(repressed.atha.enrich.kegg)
head(df.repressed.atha.enrich.kegg)
## Activated genes using DESeq2: activated.genes.deseq2
activated.atha.enrich.kegg.deseq2 <- enrichKEGG(gene  = names(xx[xx %in%activated.genes.deseq2]),
organism = "cel", #cel
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
keyType = "ncbi-geneid")
df.activated.atha.enrich.kegg.deseq2 <- as.data.frame(activated.atha.enrich.kegg.deseq2)
head(df.activated.atha.enrich.kegg.deseq2)
repressed.atha.enrich.kegg.deseq2 <- enrichKEGG(gene  = names(xx[xx %in%repressed.genes.deseq2]),
organism = "cel", #cel
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
keyType = "ncbi-geneid")
df.repressed.atha.enrich.kegg.deseq2 <- as.data.frame(repressed.atha.enrich.kegg.deseq2)
head(df.repressed.atha.enrich.kegg.deseq2)
mi_diagrama_venn(
x = list(df.activated.atha.enrich.kegg$ID, df.activated.atha.enrich.kegg.deseq2$ID),
category.names = c("Las rutas KEGG activadas usando Limma" , "Las rutas KEGG activadas usando DESeq2"),
filename = 'images/activated_KEGG.png'
)
mi_diagrama_venn(
x = list(df.repressed.atha.enrich.kegg$ID, df.repressed.atha.enrich.kegg.deseq2$ID),
category.names = c("Las rutas KEGG reprimidas usando Limma" , "Las rutas KEGG reprimidos usando DESeq2"),
filename = 'images/repressed_KEGG.png'
)
## Hemos usado el paquete pathview para visualizar las rutas KEGG
library(pathview)
annot_df<- data.frame(wormbase= as.character(xx), entrezid= names(xx))
# log.fold.change_geneID <- log.fold.change
log.fold.change_geneID <- EV_control.Ethyl_carbamate$logFC
names(log.fold.change_geneID) <- annot_df[match(genes.ids,annot_df$wormbase),2]
pathview(gene.data = sort(log.fold.change_geneID,decreasing = TRUE),
pathway.id = "cel04146", #la ruta mas segnificatia en las reprimidas.
species = "cel", #"cel"
limit = list(gene=max(abs(log.fold.change_geneID)), cpd=1),gene.idtype = "entrez")#WormBase
#Drug metabolism- cytochrome P450 (cel00982) p-valor=1.172020e-05
pathview(gene.data = sort(log.fold.change_geneID,decreasing = TRUE),
pathway.id = "cel00982", #la ruta mas segnificatia en las reprimidas.
species = "cel", #"cel"
limit = list(gene=max(abs(log.fold.change_geneID)), cpd=1),gene.idtype = "entrez")#WormBase
unlink("Documents/Master/omicas/tarea_final/grupo05/tarea_RNA_seq_grupo05_cache", recursive = TRUE)
library(ballgown)
## Para cargar los datos es necesario crear previamente un fichero tabular
## del diseño experimental.
pheno.data <- data.frame(sample =c("sample01","sample02","sample03",
"sample04","sample05","sample06"),
genotype=as.factor(c(rep("EV_control",3),
rep("Ethyl_carbamate",3))))
## La función ballgown se usa para cargar o leer los datos.
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=pheno.data)
bg.data
sampleNames(bg.data)
## La función gexpr extrae los niveles de expresión génicos en cada muestra
## medidos como FPKM(Fragments Per Kilobase of exon and Million of mapped reads)
gene.expression <- gexpr(bg.data)
head(gene.expression)
dim(gene.expression)
gene.names <- rownames(gene.expression)
## Nombramos las columnas con los nombres de nuestras muestras.
colnames(gene.expression) <-
c("EV_control_1","EV_control_2","EV_control_3",
"Ethyl_carbamate_1","Ethyl_carbamate_2","Ethyl_carbamate_3")
## Por motivos técnicos sumamos 1 a todos los niveles de expresión.
## El problema viene provocado por x < 1 --> log2(x) < 0
gene.expression.1 <- gene.expression + 1
## Guardamos los datos de expresión génica sin procesar
write.table(x = gene.expression.1,file = "pcg_gene_expression.tsv",
quote = F,row.names = F,
sep = "\t")
## Representación de la distribución global de la expresión génica
# png("images/distr.png")
boxplot(gene.expression, outline=F,col=rainbow(4),ylab="Gene Expression (FPKM)",
cex.lab=1.5)
# dev.off()
# png("images/distr_log2.png")
boxplot(log2(gene.expression.1), outline=F,col=rainbow(4),
ylab="log2(Gene Expression)",
cex.lab=1.5)
# dev.off()
library(NormalyzerDE)
design <- data.frame(sample=colnames(gene.expression),
group=c(rep("EV_control",3),rep("Ethyl_carbamate",3)))
write.table(x = design,file = "normalyzer_design.tsv",quote = F,row.names = F,
sep = "\t")
# normalyzer(jobName = "PCG",designPath = "normalyzer_design.tsv",
#            dataPath = "pcg_gene_expression.tsv",outputDir = ".")
# Normalización de la expresión empleado la técnica Quantile
normalized.gene.expression <- read.table(file="PCG/Quantile-normalized.txt",
header=T)
head(normalized.gene.expression)
rownames(normalized.gene.expression) <- gene.names
## Representación de la distribución global de la expresión génica tras la normalización
# png("images/distr_normalized.png")
boxplot(normalized.gene.expression, outline=F,col=rep(rainbow(2), each=3),
ylab="log2(FPKM + 1)",cex.lab=1.5,
main="La distribución global de la expresión génica normalizada")
# dev.off()
## Previsualizamos la similitud entre las réplicas
# png("images/similitud_entre_replicasEV1-2.png")
plot(x = normalized.gene.expression[,"EV_control_1"],
y = normalized.gene.expression[,"EV_control_2"],
pch=19,col="grey",xlab="EV_control_1",ylab="EV_control_2",cex=0.5)
text(x=3,y=14,
labels = paste(c(
"cor = ",
round(100*cor(normalized.gene.expression[,"EV_control_1"],
normalized.gene.expression[,"EV_control_2"]),
digits = 2),
"%"), collapse=""))
# dev.off()
# png("images/similitud_entre_replicasEthyl_carbamate1-2.png")
plot(x = normalized.gene.expression[,"Ethyl_carbamate_1"],
y = normalized.gene.expression[,"Ethyl_carbamate_2"],
pch=19,col="grey",
xlab="Ethyl_carbamate_1",ylab="Ethyl_carbamate_2",cex=0.5)
text(x=3,y=14,
labels = paste(c(
"cor = ",
round(100*cor(normalized.gene.expression[,"Ethyl_carbamate_1"],
normalized.gene.expression[,"Ethyl_carbamate_2"]),
digits = 2),
"%"), collapse=""))
# dev.off()
library(FactoMineR)
library(factoextra)
pca.gene.expression <- data.frame(colnames(normalized.gene.expression),
t(normalized.gene.expression))
colnames(pca.gene.expression)[1] <- "Sample"
head(pca.gene.expression)
res.pca <- PCA(pca.gene.expression, graph = FALSE,scale.unit = TRUE,
quali.sup = 1 )
res.hcpc <- HCPC(res.pca, graph=FALSE,nb.clust = 2)
# png("images/fviz_pca_ind.png")
fviz_pca_ind(res.pca, col.ind =
c("EV","EV","EV",
"Ethyl_carbamate","Ethyl_carbamate","Ethyl_carbamate"),
pointsize=2, pointshape=21,fill="black",
repel = TRUE,
addEllipses = TRUE,ellipse.type = "confidence",
legend.title="Conditions",
title="",
show_legend=TRUE,show_guide=TRUE)
# dev.off()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ballgown)
## Para cargar los datos es necesario crear previamente un fichero tabular
## del diseño experimental.
pheno.data <- data.frame(sample =c("sample01","sample02","sample03",
"sample04","sample05","sample06"),
genotype=as.factor(c(rep("EV_control",3),
rep("Ethyl_carbamate",3))))
## La función ballgown se usa para cargar o leer los datos.
bg.data <- ballgown(dataDir = ".", samplePattern = "sample", pData=pheno.data)
sampleNames(bg.data)
## La función gexpr extrae los niveles de expresión génicos en cada muestra
## medidos como FPKM(Fragments Per Kilobase of exon and Million of mapped reads)
gene.expression <- gexpr(bg.data)
gene.names <- rownames(gene.expression)
## Nombramos las columnas con los nombres de nuestras muestras.
colnames(gene.expression) <-
c("EV_control_1","EV_control_2","EV_control_3",
"Ethyl_carbamate_1","Ethyl_carbamate_2","Ethyl_carbamate_3")
## Por motivos técnicos sumamos 1 a todos los niveles de expresión.
## El problema viene provocado por x < 1 --> log2(x) < 0
gene.expression.1 <- gene.expression + 1
## Guardamos los datos de expresión génica sin procesar
write.table(x = gene.expression.1,file = "pcg_gene_expression.tsv",
quote = F,row.names = F,
sep = "\t")
## Análisis de expresión génica diferencial con DESeq2
library(DESeq2)
pheno.data
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
rownames(gene.count.matrix) <- gene.ids
dds <- DESeqDataSetFromMatrix(countData=gene.count.matrix,
colData=pheno.data, design = ~ genotype)
dds$genotype <- relevel(dds$genotype, ref = "EV_control")
dds <- DESeq(dds)
res <- results(dds)
log.fold.change <- res$log2FoldChange
q.value <- res$padj
names(log.fold.change) <- gene.ids
names(q.value) <- gene.ids
activated.genes.deseq2 <- gene.ids[log.fold.change > 1 & q.value < 0.05]
activated.genes.deseq2 <- activated.genes.deseq2[!is.na(activated.genes.deseq2)]
repressed.genes.deseq2 <- gene.ids[log.fold.change < - 1 & q.value < 0.05]
repressed.genes.deseq2 <- repressed.genes.deseq2[!is.na(repressed.genes.deseq2)]
length(activated.genes.deseq2)
length(repressed.genes.deseq2)
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
## Análisis de expresión génica diferencial con DESeq2
library(DESeq2)
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
rownames(gene.count.matrix) <- gene.ids
dds <- DESeqDataSetFromMatrix(countData=gene.count.matrix,
colData=pheno.data, design = ~ genotype)
dds$genotype <- relevel(dds$genotype, ref = "EV_control")
dds <- DESeq(dds)
res <- results(dds)
log.fold.change <- res$log2FoldChange
q.value <- res$padj
names(log.fold.change) <- gene.ids
names(q.value) <- gene.ids
activated.genes.deseq2 <- gene.ids[log.fold.change > 1 & q.value < 0.05]
activated.genes.deseq2 <- activated.genes.deseq2[!is.na(activated.genes.deseq2)]
repressed.genes.deseq2 <- gene.ids[log.fold.change < - 1 & q.value < 0.05]
repressed.genes.deseq2 <- repressed.genes.deseq2[!is.na(repressed.genes.deseq2)]
length(activated.genes.deseq2)
length(repressed.genes.deseq2)
## Análisis de expresión génica diferencial con DESeq2
library(DESeq2)
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
rownames(gene.count.matrix) <- gene.ids
dds <- DESeqDataSetFromMatrix(countData=gene.count.matrix,
colData=pheno.data, design = ~ genotype)
dds$genotype <- relevel(dds$genotype, ref = "EV_control")
dds <- DESeq(dds)
res <- results(dds)
log.fold.change <- res$log2FoldChange
q.value <- res$padj
names(log.fold.change) <- gene.ids
names(q.value) <- gene.ids
activated.genes.deseq2 <- gene.ids[log.fold.change > 1 & q.value < 0.05]
activated.genes.deseq2 <- activated.genes.deseq2[!is.na(activated.genes.deseq2)]
repressed.genes.deseq2 <- gene.ids[log.fold.change < - 1 & q.value < 0.05]
repressed.genes.deseq2 <- repressed.genes.deseq2[!is.na(repressed.genes.deseq2)]
length(activated.genes.deseq2)
length(repressed.genes.deseq2)
## Análisis de expresión génica diferencial con DESeq2
library(DESeq2)
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),
FUN = function(x){return(x[1])})
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
rownames(gene.count.matrix) <- gene.ids
dds <- DESeqDataSetFromMatrix(countData=gene.count.matrix,
colData=pheno.data, design = ~ genotype)
dds$genotype <- relevel(dds$genotype, ref = "EV_control")
dds <- DESeq(dds)
res <- results(dds)
log.fold.change <- res$log2FoldChange
q.value <- res$padj
names(log.fold.change) <- gene.ids
names(q.value) <- gene.ids
activated.genes.deseq2 <- gene.ids[log.fold.change > 1 & q.value < 0.05]
activated.genes.deseq2 <- activated.genes.deseq2[!is.na(activated.genes.deseq2)]
repressed.genes.deseq2 <- gene.ids[log.fold.change < - 1 & q.value < 0.05]
repressed.genes.deseq2 <- repressed.genes.deseq2[!is.na(repressed.genes.deseq2)]
length(activated.genes.deseq2)
length(repressed.genes.deseq2)
## Análisis de expresión génica diferencial con DESeq2
library(DESeq2)
gene.count.matrix <- read.table(file = "results_csv/gene_count_matrix.csv",
header = T,sep = ",")
gene.ids <- sapply(X = strsplit(x = gene.count.matrix$gene_id,split = "\\|"),function(x){return(x[1])})
gene.count.matrix <- gene.count.matrix[,-1]
rownames(gene.count.matrix) <- gene.ids
dds <- DESeqDataSetFromMatrix(countData=gene.count.matrix,
colData=pheno.data, design = ~ genotype)
dds$genotype <- relevel(dds$genotype, ref = "EV_control")
dds <- DESeq(dds)
res <- results(dds)
log.fold.change <- res$log2FoldChange
q.value <- res$padj
names(log.fold.change) <- gene.ids
names(q.value) <- gene.ids
activated.genes.deseq2 <- gene.ids[log.fold.change > 1 & q.value < 0.05]
activated.genes.deseq2 <- activated.genes.deseq2[!is.na(activated.genes.deseq2)]
repressed.genes.deseq2 <- gene.ids[log.fold.change < - 1 & q.value < 0.05]
repressed.genes.deseq2 <- repressed.genes.deseq2[!is.na(repressed.genes.deseq2)]
length(activated.genes.deseq2)
length(repressed.genes.deseq2)
unlink("Documents/Master/omicas/tarea_final/grupo05/tarea_RNA_seq_grupo05_cache", recursive = TRUE)
unlink("Documents/Master/omicas/tarea_final/grupo05/tarea_RNA_seq_grupo05_cache", recursive = TRUE)
unlink("Documents/Master/omicas/tarea_final/grupo05/tarea_RNA_seq_grupo05_cache", recursive = TRUE)
install.packages("igraph")
install.packages("igraph")
library("igraph")
?transitivity()
options(device = "Cairo")
cat("Welcome to MetaboPathia")
# As hipathia, it is also based on an iterative algorithm which is able to
# compute the signal intensity passing through the nodes of a network by taking into account
# the level of expression of each gene/metabolite and the intensity of the signal arriving to it.
# It also provides a new approach to functional analysis allowing to compute the signal arriving to the
# functions annotated to each pathway.
##
# library(igraph, warn.conflicts = F)
# library(ggplot2)
# library("e1071", warn.conflicts = F)
# suppressPackageStartupMessages(library(R.utils, warn.conflicts = F))
library(hipathia, warn.conflicts = F)
BiocManager::install("hipathia")
# As hipathia, it is also based on an iterative algorithm which is able to
# compute the signal intensity passing through the nodes of a network by taking into account
# the level of expression of each gene/metabolite and the intensity of the signal arriving to it.
# It also provides a new approach to functional analysis allowing to compute the signal arriving to the
# functions annotated to each pathway.
##
# library(igraph, warn.conflicts = F)
# library(ggplot2)
# library("e1071", warn.conflicts = F)
# suppressPackageStartupMessages(library(R.utils, warn.conflicts = F))
library(hipathia, warn.conflicts = F)
BiocManager::install("hipathia", force = T)
cat("Welcome to MetaboPathia")
# As hipathia, it is also based on an iterative algorithm which is able to
# compute the signal intensity passing through the nodes of a network by taking into account
# the level of expression of each gene/metabolite and the intensity of the signal arriving to it.
# It also provides a new approach to functional analysis allowing to compute the signal arriving to the
# functions annotated to each pathway.
##
# library(igraph, warn.conflicts = F)
# library(ggplot2)
# library("e1071", warn.conflicts = F)
# suppressPackageStartupMessages(library(R.utils, warn.conflicts = F))
library(hipathia, warn.conflicts = F)
## EXAMPLE 1
codebase <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(codebase)
species <- "hsa"
exp_file <- "data_examples/brca_example1_40__exp.txt"
design_file <- "data_examples/brca_example1_40__design.txt"
met_file <-"data_examples/metabolomics_toy.tsv"
cond1 <- "Tumor"
cond2 <- "Normal"
decompose <- F
difexp <- T
go <- T
uniprot <- T
output_folder <- "test"
verbose <- T
if(!exists("species") || is.null(species)) species <- "hsa"
if(!exists("decompose") || is.null(decompose)) decompose <- F
if(!exists("go") || is.null(go)) go <- F
if(!exists("uniprot") || is.null(uniprot)) uniprot <- F
if(!exists("difexp") || is.null(difexp)) difexp <- F
if(!exists("analysis") || is.null(analysis)) analysis <- "compare"
if(!exists("unadjusted") || is.null(unadjusted)) unadjusted <- F
if(!exists("paired") || is.null(paired)) {
paired <- F
} else {
paired <- T
}
if(is.null(cond1) | is.null(cond2)) {
cond1 <- "Tumor"
cond2 <- "Normal"
}
if(exists("exp_file") && !is.null(exp_file)){
dataset <- "gex"
} else stop("ERROR: The expression file matrix is not uploaded. Please make sure to upload the expression data before proceeding.")
if(!exists("met_file") || is.null(met_file)){
warning("Metabolomics profile is missing.")
}
if(!exists("verbose") || is.null(verbose)) verbose <- F
if(!exists("design_type") || is.null(design_type)) design_type <- "categorical"
if(!exists("pathways_list")) pathways_list<-NULL
if(verbose==T){
cat("\nWELCOME TO METABOPATHIA Alpha-version:\n")
cat("\nDetected parameters: \n")
cat("\t\tcodebase: ",codebase,"\n")
cat("\t\toutput_folder: ",output_folder,"\n")
cat("\t\tspecies: ",species,"\n")
cat("\t>>>Expression:\n")
cat("\t\texp_file: ",exp_file,"\n")
cat("\t\texpression: ",dataset,"\n")
cat("\t>>>Metabolomics:\n")
cat("\t\tmet_file: ",met_file,"\n")
cat("\t>>>Experimental design:\n")
cat("\t\tanalysis: ",analysis,"\n")
cat("\t\tdesign_type: ",design_type,"\n")
cat("\t\tdesign_file: ",design_file,"\n")
cat("\t\tcond1: ",cond1,"\n")
cat("\t\tcond2: ",cond2,"\n")
cat("\t>>>Method parameters:\n")
cat("\t\tpathways_list: ",ifelse(is.null(pathways_list), "All", pathways_list),"\n")
cat("\t\tdecompose: ",decompose,"\n")
cat("\t\tdifexp: ",difexp,"\n")
cat("\t>>>Functional analysis:\n")
cat("\t\tgo: ",go,"\n")
cat("\t\tuniprot: ",uniprot,"\n")
# cat("\n\n")
# cat("\t\treport: ",report,"\n")
# cat("\n\n")
}
#### PREPARE DATA
if (!dir.exists(output_folder)) dir.create(output_folder)
status <- function(value){
write(value,file=paste0(output_folder,"/status.txt"))
}
status("0")
# suppress warning messages generated by various functions or operations
options(warn=-1)
# load pathways
pathways <- hipathia::load_pathways(species = species, pathways_list = pathways_list)
dataset
exp <- read.table(exp_file,header=T,sep="\t",stringsAsFactors=F,row.names = 1,comment.char="",check.names=F)
exp2 <- hipathia::translate_data(exp, species=species, verbose=T)
as.matrix(exp)
exp2 <- hipathia::translate_data(as.matrix(exp), species=species, verbose=T)
des <- read.table(design_file,header=F,stringsAsFactors=F)
#paired data has to be ordred
#if(paired==F){
colnames(des) <- c("sample",c("group","value")[(design_type == "continuous")+1])
cat("colnames(exp) ")
print(colnames(exp) )
#} else {
#  colnames(des) <- c("sample",c("group","value")[(design_type == "continuous")+1], "donor")
#}
rownames(des) <- des$sample
if(design_type == "categorical"){
des <- des[ des$group==cond1 | des$group==cond2, ]
}
sel_samples <- intersect(colnames(exp),rownames(des))
if(length(sel_samples)==0){
stop("ERROR: No intersection between samples names in the Expression matrix and the Design matrix; please check your input data ")
}
# at least 3 complete pairs of observation
if(length(sel_samples)<3){
stop("ERROR: Not enough samples in the Expression matrix (at least 3 complete pairs); please check your input data ")
}
exp <- exp[,sel_samples]
des <- des[sel_samples,]
#paired data suppose t o be ordred
#  if(paired==T & FALSE){
#   sample_order <- order(des$donor)
#    ordered_samples <- des[sample_order,"sample"]
#    exp <- exp[,ordered_samples]
#    des <- des[ordered_samples,]
#  }
View(des)
?hipathia::hipathia()
?hipathia::hipathia()
View(exp)
exp <- hipathia::translate_data(as.matrix(exp), species=species, verbose=T)
