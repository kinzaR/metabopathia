panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal",
plot.title.position = c(0.1, 0.7),
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal",
plot.title.position = c(0.1, 0.7)
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal"
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal"
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal",
plot.title.position = c(0,0.7)
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal",
plot.title= element_text(size=14, face="bold", margin = 0.7)
)
#create correlation heatmap
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
heatMap_matrix<-reorder_cormat(round(gene.correlation,2))
heatMap_matrix[upper.tri(heatMap_matrix)]<-NA
ggplot(melt(heatMap_matrix, na.rm = TRUE), aes(x = Var1, y = Var2, fill = value)) +
geom_raster()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
ggtitle("El heatmap de correlación entre los perfiles génicos") +
xlab("Genes") + ylab("Genes")+
theme(
axis.text = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal",
plot.title= element_text(size=14, face="bold")
)
#install.packages('igraph')
library(igraph)
##Construimos un vector con los diferentes umbrales que vamos a estudiar
thresholds <- seq(from=0.80,to=0.99,by=0.02)
thresholds
## Para cada umbral se establece la conectividad y R^2 almacenados en dos vectores
#que se generan a continuación:
mean.connectivities <- vector(length=length(thresholds))
scale.free.R2 <- vector(length=length(thresholds))
names(mean.connectivities) = thresholds
names(scale.free.R2) = thresholds
## A continuación a través de los siguientes bucles, se construyen redes de correlación para cada umbral. De este manera, se explora como varía la conectividad y el ajuste a la propiedad de libre de escala de la red para cada  (R^2), pudiendo determinar cuál es el mejor y que se usará para el análsis.
#En primer lugar, se hace 0 la diagonal prinicpal para que no se tenga en cuenta la correlación de un gen consigo mismo que siempre será 1.
for(i in 1:nrow(gene.correlation))
{
gene.correlation[i,i] = 0
}
## Iteramos a través de los diferentes umbrales para obtener la conectivdad media y el R^2.
for(i in 1:length(thresholds))
{
print(thresholds[i])
current.adjacency <- (gene.correlation > thresholds[i])
threshold.network <- graph.adjacency(current.adjacency, mode="undirected")
node.degrees <- degree(threshold.network)
mean.connectivities[i] <- mean(node.degrees)
h <- hist(node.degrees, main = paste("Histogram of node degrees (thresholds =" , thresholds[i],")") )
degree.frequencies <- table(node.degrees)
lm.r <- lm(log10(as.numeric(names(degree.frequencies[-1]))) ~ log10(degree.frequencies[-1]))
s.lm <- summary(lm.r)
scale.free.R2[i] <- s.lm[["adj.r.squared"]]
}
## Representamos gráficamente la conectividad media y la R² para cada umbral posible.
par(mar=c(5,4,4,5)+.1)
plot(thresholds,mean.connectivities,type="o",col="red",lwd=5,ylab="",xlab="",cex.axis=1.25,font.axis=2)
mtext(side=1,"Correlation Cut-off Threshold",cex=1.5,line=3)
mtext(side=2,"Average Connectivity",cex=1.5,line=3)
par(new=TRUE)
plot(thresholds,scale.free.R2,type="o",col="blue",xaxt="n",yaxt="n",xlab="",ylab="",lwd=5,pch=0,cex.axis=1.25,font.axis=2)
axis(4,font=2,cex.axis=1.25)
mtext("Scale Free Model Fit (R²)",side=4,line=3,cex=1.5)
conectividad <- mean.connectivities
R2<-scale.free.R2
all <- rbind(conectividad,R2)
all
adjacency.098 <- (gene.correlation > 0.98)
gene.coexpression.network <- graph.adjacency(adjacency.098, mode="undirected")
write.graph(gene.coexpression.network,file="AT_coexpression_network.gml",format="gml")
nrow(gene.expression)
length(V(gene.coexpression.network))
length(V(gene.coexpression.network))
length(E(gene.coexpression.network))
cat("La red tiene ", length(V(gene.coexpression.network))," nodos",
" y ",length(E(gene.coexpression.network))," aristas")
cat("La red tiene ", length(V(gene.coexpression.network))," nodos",
" y ",length(E(gene.coexpression.network))," aristas")
dim(gene.correlation)
install.packages("visNetwork")
# install.packages("visNetwork")
library(visNetwork)
otraVis <- visNetwork::toVisNetworkData(gene.coexpression.network)
visNetwork::visNetwork(nodes = data$nodes, edges = data$edges, height = "500px")
# install.packages("visNetwork")
library(visNetwork)
otraVis <- visNetwork::toVisNetworkData(gene.coexpression.network)
visNetwork::visNetwork(nodes = otraVis$nodes, edges = otraVis$edges, height = "500px")
library(hipathia)
p <- hipathia::load_pathways(species = species)
#
species <- "hsa"
p <- hipathia::load_pathways(species = species)
p
p <- hipathia::load_pathways(species = species)
install.packages("hipathia")
install.packages("hipathia")
#
species <- "hsa"
library(hipathia)
p <- hipathia::load_pathways(species = species)
pgs <- p$pathigraphs
x
x<-pgs$hsa03320
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
tooltip
annot <- vertex_attr(x$graph) %>% as_data_frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
remove.packages("hipathia")
library(hipathia)
remove.packages(pkgs = hipathia)
remove.packages(pkgs = "hipathia")
library(hipathia)
p <- hipathia::load_pathways(species = species)
BiocManager::remove("hipathia")
remove.packages("AnnotationHub")
library(AnnotationDbi)
remove.packages("AnnotationDbi", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
p <- hipathia::load_pathways(species = species)
BiocManager::install("hipathia")
p <- hipathia::load_pathways(species = species)
remove.packages("AnnotationHub")
ah <- AnnotationHub::AnnotationHub()
ah
AnnotationHub::hubCache(ah)
removeCache()
removeCache(ANNOTATION_HUB_CACHE)
ANNOTATION_HUB_CACHE
removeCache(ah)
p <- hipathia::load_pathways(species = species)
pgs <- p$pathigraphs
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
annot <- vertex_attr(x$graph) %>% as_data_frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
y <- annot$tooltip
names(y) <- annot$label
return(annot)
# return(y)
})
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
tooltip
vertex_attr(x$graph)
vertex_attr(x$graph) %>% as_data_frame(.)
vertex_attr(x$graph) %>% as.data.frame(.)
vertex_attrs <- as.data.frame(vertex_attr(x$graph))
names(vertex_attr(x$graph))
length(vertex_attr(x$graph)$genesList)
length(vertex_attr(x$graph)$tooltip)
lapply(vertex_attr(x$graph), dim)
lapply(vertex_attr(x$graph), length)
lapply(vertex_attr(x$graph), cbind)
do.call(what = cbind, args = vertex_attr(x$graph))
test <- do.call(what = cbind, args = vertex_attr(x$graph))
View(test)
class(test)
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
View(annot)
annot
annot$tooltip
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as_data_frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
install.packages("stringr")
install.packages("stringr")
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
install.packages("dplyr")
BiocManager::install("AnnotationHub")
annot
kegg_ids_pathNodes_df
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
y <- annot$tooltip
names(y) <- annot$label
return(annot)
# return(y)
})
x
V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
library(igraph)
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
y <- annot$tooltip
names(y) <- annot$label
return(annot)
# return(y)
})
library(stringr)
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
y <- annot$tooltip
names(y) <- annot$label
return(annot)
# return(y)
})
kegg_ids_pathNodes_df
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
View(annot)
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
# y <- annot$tooltip
# names(y) <- annot$label
return(annot)
# return(y)
})
traceback()
kegg_ids_pathNodes_df <- lapply(pgs, function(x) {
print(x$path.id)
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
annot$path.name<- x$path.name
# y <- annot$tooltip
# names(y) <- annot$label
return(annot)
# return(y)
})
x$path.id
x<- pgs$hsa03460
tooltip<-V(x$graph)$tooltip[which(V(x$graph)$shape ==
"circle")]
# annot <- vertex_attr(x$graph) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
annot <- do.call(what = cbind, args = vertex_attr(x$graph)) %>% as.data.frame(.) %>%  .[.$shape == "circle",c("label","tooltip")]
# Extract the kegg id
annot$nodeID <- str_extract(annot$tooltip, "(?<=href=http://www.kegg.jp/dbget-bin/www_bget\\?)[^>]+")
annot$path.id <- x$path.id
x$path.id
## Selecting and Identifying MGI pathways without any complication.
# Simple pathways are :
#   - Have only entrezID or NA in the genesList
# - If there is metabolites: only one per metaboliteID; no + & no hsa:
library(hipathia)
species <- "hsa"
## Selecting and Identifying MGI pathways without any complication.
# Simple pathways are :
#   - Have only entrezID or NA in the genesList
# - If there is metabolites: only one per metaboliteID; no + & no hsa:
library(hipathia)
species <- "hsa"
p <- hipathia::load_pathways(species = species)
## Selecting and Identifying MGI pathways without any complication.
# Simple pathways are :
#   - Have only entrezID or NA in the genesList
# - If there is metabolites: only one per metaboliteID; no + & no hsa:
library(hipathia)
species <- "hsa"
p <- hipathia::load_pathways(species = species)
library(dplyr)
species <- "hsa"
load(paste0(species,"_module_data_Dec2016.RData"))
library(dplyr)
species <- "hsa"
load(paste0(species,"_module_data_Dec2016.RData"))
setwd("~/Documents/metabopathia/metabolic_pathways/from_metabolizer")
species <- "hsa"
load(paste0(species,"_module_data_Dec2016.RData"))
m <- hsa_module_data$M00001_C00022
lapply(hsa_module_data, function(m){
m$KEGG_met_path_node$KEGG_met_path_node_info[m$KEGG_met_path_node$KEGG_met_path_node_info$type== "compound","graphics_name"]
}) %>% unlist
lapply(hsa_module_data, function(m){
m$KEGG_met_path_node$KEGG_met_path_node_info[m$KEGG_met_path_node$KEGG_met_path_node_info$type== "compound","graphics_name"]
}) %>% unlist %>% unname()
lapply(hsa_module_data, function(m){
m$KEGG_met_path_node$KEGG_met_path_node_info[m$KEGG_met_path_node$KEGG_met_path_node_info$type== "compound","graphics_name"]
}) %>% unlist %>% unname() %>% unique()
metabolizer_metabolites<-lapply(hsa_module_data, function(m){
m$KEGG_met_path_node$KEGG_met_path_node_info[m$KEGG_met_path_node$KEGG_met_path_node_info$type== "compound","graphics_name"]
}) %>% unlist %>% unname() %>% unique()
suero<-read.csv2("../../data_examples/Dystrophic_epidermolysis_bullosa/Suero_KEGGID-Conc_signif_final.csv")
View(suero)
intersect(suero$KEGG_ID, metabolizer_metabolites)
intersect(suero$KEGG_ID, metabolizer_metabolites) %>% length()
length(suero$KEGG_ID,)
length(suero$KEGG_ID)
ampolla<-read.csv2("../../data_examples/Dystrophic_epidermolysis_bullosa/Ampolla_KEGGID-Conc_signif_final.csv")
View(ampolla)
intersect(ampolla$KEGG, metabolizer_metabolites) %>% length()
length(ampolla$KEGG)
length(unique(ampolla$KEGG))
length(unique(suero$KEGG_ID))
intersect(suero$KEGG_ID, metabolizer_metabolites) %>% unique %>% length()
orina<-read.csv2("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv")
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv")
View(orina)
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv")
orina<-read.csv2("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv")
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv", sep = ",")
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv", sep = "\t")
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv", sep = "\t") %>% t()
colnames(orina)
orina[,1]
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv", sep = "\t") %>% t()
colnames(orina)
orina<-read.csv("../../data_examples/Dystrophic_epidermolysis_bullosa/Orina.csv", sep = "\t") %>% t() %>% as.data.frame()
colnames(orina)
orina[,1]
orina[1,]
colnames(orina)<- orina[1,]
orina <- orina[-c(1,2),]
intersect(orina, metabolizer_metabolites)  %>% unique %>% length()
intersect(rownames(orina), metabolizer_metabolites)  %>% unique %>% length()
rownames(orina)
intersect(rownames(orina), metabolizer_metabolites)  %>% unique %>% length()
intersect(rownames(orina), metabolizer_metabolites)
length(rownames(orina))
intersect(suero$KEGG_ID, metabolizer_metabolites) %>% unique %>% length()
length(unique(suero$KEGG_ID))
intersect(ampolla$KEGG, metabolizer_metabolites)  %>% unique %>% length()
length(unique(ampolla$KEGG))#
intersect(rownames(orina), metabolizer_metabolites)  %>% unique %>% length()
length(rownames(orina))
length(unique(rownames(orina)))
unique(rownames(orina))
